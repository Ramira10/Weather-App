'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var isFunction = require('lodash.isfunction');
var React = require('react');
var PropTypes = require('prop-types');
var swal = typeof window !== 'undefined' ? require('sweetalert') : null;
var pick = require('lodash.pick');

var SweetAlert = function (_React$Component) {
  _inherits(SweetAlert, _React$Component);

  function SweetAlert() {
    _classCallCheck(this, SweetAlert);

    return _possibleConstructorReturn(this, (SweetAlert.__proto__ || Object.getPrototypeOf(SweetAlert)).apply(this, arguments));
  }

  _createClass(SweetAlert, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var isOpen = this.props.isOpen;

      if (isOpen && isFunction(swal)) {
        var options = pick(this.props, Object.keys(SweetAlert.defaultProps));
        swal(options, function (result) {
          if (_this2.props.callback) {
            _this2.props.callback(result);
          }
        });
      }

      return null;
    }
  }]);

  return SweetAlert;
}(React.Component);

SweetAlert.displayName = 'SweetAlert';

SweetAlert.propTypes = {
  isOpen: PropTypes.bool.isRequired,

  type: PropTypes.oneOf(['warning', 'error', 'success', 'info']),
  text: PropTypes.string,
  title: PropTypes.string,
  allowEscKey: PropTypes.bool,
  customClass: PropTypes.string,
  allowOutSideClick: PropTypes.bool,
  showCancelButton: PropTypes.bool,
  showConfirmButton: PropTypes.bool,
  confirmButtonText: PropTypes.string,
  confirmButtonColor: PropTypes.string,
  cancelButtonText: PropTypes.string,
  closeOnConfirm: PropTypes.bool,
  closeOnCancel: PropTypes.bool,
  imageUrl: PropTypes.string,
  imageSize: PropTypes.string,
  timer: PropTypes.number,
  html: PropTypes.bool,
  animation: PropTypes.bool,
  inputType: PropTypes.string,
  inputPlaceholder: PropTypes.string,
  inputValue: PropTypes.string,

  callback: PropTypes.func
};

SweetAlert.defaultProps = {
  type: 'warning',
  text: 'Are you sure you want to do this?',
  title: 'Are you sure?',
  allowEscKey: true,
  customClass: null,
  allowOutSideClick: false,
  showCancelButton: true,
  showConfirmButton: true,
  confirmButtonText: 'Confirm',
  confirmButtonColor: '#AEDEF4',
  cancelButtonText: 'Cancel',
  closeOnConfirm: true,
  closeOnCancel: true,
  imageUrl: null,
  imageSize: '80x80',
  timer: null,
  html: false,
  animation: true,
  inputType: 'text',
  inputPlaceholder: null,
  inputValue: null
};

module.exports = SweetAlert;