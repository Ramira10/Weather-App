{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mat\\xEDas Ramira\\\\Desktop\\\\SoyHenry\\\\M2\\\\FT-M2\\\\09-React-Routing\\\\homework\\\\src\\\\containers\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport Nav from '../components/Nav.jsx';\nimport Cards from '../components/Cards.jsx';\nimport { Route } from 'react-router-dom';\nimport About from '../components/About.jsx';\nimport Ciudad from '../components/Ciudad.jsx';\nimport Charge from '../components/Charge';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [cities, setCities] = useState([]);\n\n  function onSearch(ciudad) {\n    // Lamada a la API externa ---> Datos\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=3e9e9c2546209a18ca647b0e3c183813&units=metric`).then(r => r.json()).then(recurso => {\n      if (recurso.main !== undefined) {\n        const ciudad = {\n          min: Math.round(recurso.main.temp_min),\n          max: Math.round(recurso.main.temp_max),\n          img: recurso.weather[0].icon,\n          id: recurso.id,\n          wind: recurso.wind.speed,\n          temp: recurso.main.temp,\n          name: recurso.name,\n          weather: recurso.weather[0].main,\n          clouds: recurso.clouds.all,\n          latitud: recurso.coord.lat,\n          longitud: recurso.coord.lon\n        };\n        setCities(oldCities => [...oldCities, ciudad]);\n      } else {\n        alert(\"Ciudad no encontrada\");\n      }\n    });\n  }\n\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id !== id));\n  }\n\n  function onFilter(ciudadId) {\n    let ciudad = cities.filter(c => c.id === parseInt(ciudadId));\n\n    if (ciudad.length > 0) {\n      return ciudad[0];\n    } else {\n      return null;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      render: () => /*#__PURE__*/_jsxDEV(Nav, {\n        onSearch: onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/about\",\n      component: About\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/\",\n      render: () => /*#__PURE__*/_jsxDEV(Cards, {\n        cities: cities,\n        onClose: onClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/ciudad/:ciudadId\",\n      render: _ref => {\n        let {\n          match\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(Ciudad, {\n          city: onFilter(match.params.ciudadId)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 28\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n/* export default App; */\n\n_s(App, \"f1nPJs+hrTaAy6BEqAnKgJLvJt4=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/MatÃ­as Ramira/Desktop/SoyHenry/M2/FT-M2/09-React-Routing/homework/src/containers/App.js"],"names":["React","useState","Nav","Cards","Route","About","Ciudad","Charge","App","cities","setCities","onSearch","ciudad","fetch","then","r","json","recurso","main","undefined","min","Math","round","temp_min","max","temp_max","img","weather","icon","id","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","oldCities","alert","onClose","filter","c","onFilter","ciudadId","parseInt","length","match","params"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Nav from '../components/Nav.jsx';\r\nimport Cards from '../components/Cards.jsx';\r\nimport { Route } from 'react-router-dom';\r\nimport About from '../components/About.jsx';\r\nimport Ciudad from '../components/Ciudad.jsx';\r\nimport Charge from '../components/Charge';\r\n\r\nexport default function App() {\r\n  const [cities, setCities] = useState([]);\r\n\r\n  function onSearch(ciudad) {\r\n    // Lamada a la API externa ---> Datos\r\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=3e9e9c2546209a18ca647b0e3c183813&units=metric`)\r\n      .then(r => r.json())\r\n      .then((recurso) => {\r\n        if (recurso.main !== undefined) {\r\n          const ciudad = {\r\n            min: Math.round(recurso.main.temp_min),\r\n            max: Math.round(recurso.main.temp_max),\r\n            img: recurso.weather[0].icon,\r\n            id: recurso.id,\r\n            wind: recurso.wind.speed,\r\n            temp: recurso.main.temp,\r\n            name: recurso.name,\r\n            weather: recurso.weather[0].main,\r\n            clouds: recurso.clouds.all,\r\n            latitud: recurso.coord.lat,\r\n            longitud: recurso.coord.lon\r\n          };\r\n          setCities(oldCities => [...oldCities, ciudad]);\r\n        } else {\r\n          alert(\"Ciudad no encontrada\");\r\n        }\r\n      });\r\n\r\n  }\r\n\r\n  function onClose(id) {\r\n    setCities(oldCities => oldCities.filter(c => c.id !== id));\r\n  }\r\n\r\n  function onFilter(ciudadId) {\r\n    let ciudad = cities.filter(c => c.id === parseInt(ciudadId));\r\n    if(ciudad.length > 0) {\r\n        return ciudad[0];\r\n    } else {\r\n        return null;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Route\r\n        path='/'\r\n        render={() => <Nav onSearch={onSearch} />}\r\n      />\r\n      <Route\r\n        path='/about'\r\n        component={About}\r\n      />\r\n      <Route\r\n        exact path='/'\r\n        render={() => <Cards cities={cities} onClose={onClose} />}\r\n      />\r\n\r\n      <Route\r\n      path='/ciudad/:ciudadId'\r\n      render={({match}) => <Ciudad city={onFilter(match.params.ciudadId)}/>}\r\n\r\n      />\r\n       \r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n/* export default App; */\r\n"]},"metadata":{},"sourceType":"module"}